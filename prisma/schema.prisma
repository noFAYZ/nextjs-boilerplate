generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  name         String?
  users        users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model account_groups {
  id                   String               @id
  userId               String
  name                 String
  description          String?
  icon                 String?
  color                String?
  sortOrder            Int                  @default(0)
  parentId             String?
  isDefault            Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  account_groups       account_groups?      @relation("account_groupsToaccount_groups", fields: [parentId], references: [id])
  other_account_groups account_groups[]     @relation("account_groupsToaccount_groups")
  users                users                @relation(fields: [userId], references: [id], onDelete: Cascade)
  crypto_wallets       crypto_wallets[]
  financial_accounts   financial_accounts[]
}

model analytics_aggregations {
  id                 String                 @id
  date               DateTime
  hour               Int?
  granularity        AggregationGranularity
  scope              AggregationScope
  scopeId            String?
  totalRequests      Int                    @default(0)
  successfulRequests Int                    @default(0)
  failedRequests     Int                    @default(0)
  avgResponseTime    Decimal?               @db.Decimal(10, 2)
  maxResponseTime    Int?
  minResponseTime    Int?
  p95ResponseTime    Int?
  status2xx          Int                    @default(0)
  status3xx          Int                    @default(0)
  status4xx          Int                    @default(0)
  status5xx          Int                    @default(0)
  externalApiCalls   Int                    @default(0)
  externalApiCost    Decimal?               @db.Decimal(12, 2)
  cacheHitRate       Decimal?               @db.Decimal(5, 2)
  topEndpoints       Json?
  topFeatures        Json?
  errorBreakdown     Json?
  uniqueUsers        Int?                   @default(0)
  planDistribution   Json?
  dataTransfer       BigInt?
  avgRequestSize     Int?
  avgResponseSize    Int?
  metadata           Json?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime

  @@unique([date, hour, granularity, scope, scopeId])
  @@index([date])
  @@index([granularity])
  @@index([scopeId])
  @@index([scope])
}

model api_analytics {
  id              String    @id
  requestId       String?
  userId          String?
  ipAddress       String?
  userAgent       String?
  method          String
  endpoint        String
  fullUrl         String?
  queryParams     Json?
  requestHeaders  Json?
  requestBody     Json?
  statusCode      Int
  responseTime    Int
  responseSize    Int?
  responseHeaders Json?
  dbQueryTime     Int?
  externalApiTime Int?
  processingTime  Int?
  errorMessage    String?
  errorStack      String?
  errorCode       String?
  apiVersion      String?
  planType        PlanType?
  feature         String?
  action          String?
  metadata        Json?
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  users           users?    @relation(fields: [userId], references: [id])

  @@index([endpoint])
  @@index([feature])
  @@index([method])
  @@index([planType])
  @@index([responseTime])
  @@index([statusCode])
  @@index([timestamp])
  @@index([userId])
}

model audit_logs {
  id         String   @id
  userId     String
  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model budgets {
  id                 String              @id
  userId             String
  accountId          String?
  categoryId         String
  name               String
  amount             Decimal             @db.Decimal(12, 2)
  period             String
  startDate          DateTime
  endDate            DateTime
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  financial_accounts financial_accounts? @relation(fields: [accountId], references: [id])
  categories         categories          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  users              users               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model categories {
  id               String         @id
  userId           String
  name             String
  icon             String?
  color            String?
  isDefault        Boolean        @default(false)
  parentId         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  budgets          budgets[]
  categories       categories?    @relation("categoriesTocategories", fields: [parentId], references: [id])
  other_categories categories[]   @relation("categoriesTocategories")
  users            users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions     transactions[]
}

model crypto_asset_registry {
  id                  String                @id
  symbol              String
  name                String
  contractAddress     String?
  decimals            Int                   @default(18)
  type                AssetType
  network             BlockchainNetwork
  logoUrl             String?
  websiteUrl          String?
  description         String?
  isVerified          Boolean               @default(false)
  price               Decimal?              @db.Decimal(18, 8)
  priceUsd            Decimal?              @db.Decimal(12, 2)
  marketCap           Decimal?              @db.Decimal(15, 2)
  volume24h           Decimal?              @db.Decimal(15, 2)
  change24h           Decimal?              @db.Decimal(8, 4)
  lastPriceUpdate     DateTime?
  priceUpdateCount    Int                   @default(0)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  crypto_positions    crypto_positions[]
  crypto_transactions crypto_transactions[]

  @@unique([contractAddress, network])
  @@unique([symbol, network, contractAddress])
  @@index([lastPriceUpdate])
  @@index([network])
  @@index([symbol])
}

model crypto_assets {
  id              String            @id
  walletId        String
  symbol          String
  name            String
  contractAddress String?
  decimals        Int               @default(18)
  type            AssetType
  network         BlockchainNetwork
  logoUrl         String?
  websiteUrl      String?
  description     String?
  isVerified      Boolean           @default(false)
  price           Decimal?          @db.Decimal(18, 8)
  priceUsd        Decimal?          @db.Decimal(12, 2)
  marketCap       Decimal?          @db.Decimal(15, 2)
  volume24h       Decimal?          @db.Decimal(15, 2)
  change24h       Decimal?          @db.Decimal(8, 4)
  lastPriceUpdate DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  crypto_wallets  crypto_wallets    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, network])
  @@unique([walletId, symbol, network, contractAddress])
  @@index([network])
  @@index([symbol])
}

model crypto_nfts {
  id               String            @id
  walletId         String
  contractAddress  String
  tokenId          String
  standard         NFTStandard
  network          BlockchainNetwork
  name             String?
  description      String?
  imageUrl         String?
  animationUrl     String?
  externalUrl      String?
  attributes       Json?
  collectionName   String?
  collectionSymbol String?
  collectionSlug   String?
  ownerAddress     String
  quantity         BigInt            @default(1)
  transferredAt    DateTime?
  lastSalePrice    Decimal?          @db.Decimal(18, 8)
  lastSalePriceUsd Decimal?          @db.Decimal(12, 2)
  floorPrice       Decimal?          @db.Decimal(18, 8)
  floorPriceUsd    Decimal?          @db.Decimal(12, 2)
  estimatedValue   Decimal?          @db.Decimal(12, 2)
  isSpam           Boolean           @default(false)
  isNsfw           Boolean           @default(false)
  rarity           String?
  rarityRank       Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  crypto_wallets   crypto_wallets    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, tokenId, network])
  @@index([collectionSlug])
  @@index([contractAddress])
  @@index([walletId])
}

model crypto_portfolio_snapshots {
  id                    String          @id
  userId                String
  walletId              String?
  totalValueUsd         Decimal         @db.Decimal(12, 2)
  totalAssets           Int
  totalNfts             Int
  totalDeFiValue        Decimal         @db.Decimal(12, 2)
  dayChange             Decimal?        @db.Decimal(12, 2)
  dayChangePct          Decimal?        @db.Decimal(8, 4)
  weekChange            Decimal?        @db.Decimal(12, 2)
  weekChangePct         Decimal?        @db.Decimal(8, 4)
  monthChange           Decimal?        @db.Decimal(12, 2)
  monthChangePct        Decimal?        @db.Decimal(8, 4)
  topAssets             Json
  networkDistribution   Json
  assetTypeDistribution Json
  snapshotDate          DateTime        @default(now())
  createdAt             DateTime        @default(now())
  users                 users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  crypto_wallets        crypto_wallets? @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([snapshotDate])
  @@index([userId])
  @@index([walletId])
}

model crypto_portfolios {
  id                  String         @id
  walletId            String         @unique
  totalPositionsValue Decimal        @db.Decimal(12, 2)
  walletValue         Decimal        @default(0) @db.Decimal(12, 2)
  depositedValue      Decimal        @default(0) @db.Decimal(12, 2)
  borrowedValue       Decimal        @default(0) @db.Decimal(12, 2)
  lockedValue         Decimal        @default(0) @db.Decimal(12, 2)
  stakedValue         Decimal        @default(0) @db.Decimal(12, 2)
  arbitrumValue       Decimal        @default(0) @db.Decimal(12, 2)
  avalancheValue      Decimal        @default(0) @db.Decimal(12, 2)
  baseValue           Decimal        @default(0) @db.Decimal(12, 2)
  bscValue            Decimal        @default(0) @db.Decimal(12, 2)
  celoValue           Decimal        @default(0) @db.Decimal(12, 2)
  ethereumValue       Decimal        @default(0) @db.Decimal(12, 2)
  fantomValue         Decimal        @default(0) @db.Decimal(12, 2)
  lineaValue          Decimal        @default(0) @db.Decimal(12, 2)
  polygonValue        Decimal        @default(0) @db.Decimal(12, 2)
  absolute24hChange   Decimal?       @db.Decimal(12, 2)
  percent24hChange    Decimal?       @db.Decimal(8, 4)
  rawZerionData       Json?
  lastSyncAt          DateTime       @default(now())
  dataFreshness       String?
  syncSource          String         @default("zerion")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime
  crypto_wallets      crypto_wallets @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([lastSyncAt])
  @@index([totalPositionsValue])
  @@index([walletId])
}

model crypto_positions {
  id                    String                 @id
  walletId              String
  assetId               String?
  balance               Decimal                @db.Decimal(38, 18)
  balanceFormatted      String
  balanceUsd            Decimal                @db.Decimal(12, 2)
  avgCostPrice          Decimal?               @db.Decimal(18, 8)
  totalCostBasis        Decimal?               @db.Decimal(12, 2)
  unrealizedPnl         Decimal?               @db.Decimal(12, 2)
  unrealizedPnlPct      Decimal?               @db.Decimal(8, 4)
  dayChange             Decimal?               @db.Decimal(12, 2)
  dayChangePct          Decimal?               @db.Decimal(8, 4)
  isStaked              Boolean                @default(false)
  stakingRewards        Decimal?               @db.Decimal(12, 2)
  lastUpdated           DateTime               @default(now())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  crypto_asset_registry crypto_asset_registry? @relation(fields: [assetId], references: [id], onDelete: Cascade)
  crypto_wallets        crypto_wallets         @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, assetId], map: "walletId_assetId")
  @@index([balanceUsd])
  @@index([walletId])
}

model crypto_transactions {
  id                    String                 @id
  walletId              String
  hash                  String
  blockNumber           BigInt?
  transactionIndex      Int?
  network               BlockchainNetwork
  type                  TransactionType
  status                TransactionStatus
  timestamp             DateTime
  fromAddress           String
  toAddress             String
  value                 Decimal                @db.Decimal(38, 18)
  valueFormatted        String
  valueUsd              Decimal?               @db.Decimal(12, 2)
  gasUsed               BigInt?
  gasPrice              Decimal?               @db.Decimal(18, 8)
  gasCost               Decimal?               @db.Decimal(18, 8)
  gasCostUsd            Decimal?               @db.Decimal(12, 2)
  assetId               String?
  assetSymbol           String
  assetContractAddress  String?
  methodId              String?
  inputData             String?
  logs                  Json?
  internalTxs           Json?
  parentTxHash          String?
  relatedTxHashes       String[]
  category              String?
  tags                  String[]
  notes                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  crypto_asset_registry crypto_asset_registry? @relation(fields: [assetId], references: [id])
  crypto_wallets        crypto_wallets         @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([hash, network])
  @@index([fromAddress])
  @@index([status])
  @@index([timestamp])
  @@index([toAddress])
  @@index([type])
  @@index([walletId])
}

model crypto_wallets {
  id                         String                       @id
  userId                     String
  name                       String
  address                    String
  type                       WalletType
  network                    BlockchainNetwork
  isActive                   Boolean                      @default(true)
  isWatching                 Boolean                      @default(true)
  label                      String?
  notes                      String?
  tags                       String[]
  groupId                    String?
  lastSyncAt                 DateTime?
  syncStatus                 String?
  syncError                  String?
  totalBalance               Decimal                      @default(0) @db.Decimal(18, 8)
  totalBalanceUsd            Decimal                      @default(0) @db.Decimal(12, 2)
  assetCount                 Int                          @default(0)
  nftCount                   Int                          @default(0)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  crypto_assets              crypto_assets[]
  crypto_nfts                crypto_nfts[]
  crypto_portfolio_snapshots crypto_portfolio_snapshots[]
  crypto_portfolios          crypto_portfolios?
  crypto_positions           crypto_positions[]
  crypto_transactions        crypto_transactions[]
  account_groups             account_groups?              @relation(fields: [groupId], references: [id])
  users                      users                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  defi_app_positions         defi_app_positions[]
  defi_positions             defi_positions[]

  @@unique([userId, address, network])
  @@index([address])
  @@index([network])
  @@index([userId])
}

model defi_app_positions {
  id                 String            @id
  walletId           String
  appId              String
  contractAddress    String
  network            BlockchainNetwork
  positionType       String
  groupId            String?
  groupLabel         String?
  symbol             String?
  decimals           Int               @default(18)
  balance            Decimal           @db.Decimal(38, 18)
  balanceFormatted   String?
  balanceUSD         Decimal           @db.Decimal(12, 2)
  price              Decimal?          @db.Decimal(18, 8)
  metaType           String?
  isActive           Boolean           @default(true)
  canWithdraw        Boolean           @default(true)
  lockupEnd          DateTime?
  apy                Decimal?          @db.Decimal(8, 4)
  apr                Decimal?          @db.Decimal(8, 4)
  dailyYield         Decimal?          @db.Decimal(12, 2)
  yieldEarned        Decimal?          @db.Decimal(12, 2)
  yieldEarnedUsd     Decimal?          @db.Decimal(12, 2)
  lastYieldClaim     DateTime?
  pricePerShare      Json?
  tokens             Json?
  supply             Decimal?          @db.Decimal(38, 18)
  displayProps       Json?
  syncSource         String            @default("zapper")
  externalPositionId String?
  lastSyncAt         DateTime?         @default(now())
  rawData            Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  defi_apps          defi_apps         @relation(fields: [appId], references: [id], onDelete: Cascade)
  crypto_wallets     crypto_wallets    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, network, syncSource])
  @@index([appId])
  @@index([balanceUSD])
  @@index([isActive])
  @@index([lastSyncAt])
  @@index([metaType])
  @@index([network])
  @@index([walletId])
}

model defi_apps {
  id                 String               @id
  slug               String
  network            BlockchainNetwork?
  displayName        String
  description        String?
  url                String?
  imgUrl             String?
  category           String?
  subcategory        String?
  isVerified         Boolean              @default(false)
  riskScore          Int?                 @default(50)
  totalValueLocked   Decimal?             @db.Decimal(15, 2)
  userCount          Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  lastSyncAt         DateTime?
  defi_app_positions defi_app_positions[]

  @@index([category])
  @@index([isVerified])
  @@index([network])
  @@index([slug])
  @@index([slug, network])
}

model defi_positions {
  id                    String            @id
  walletId              String
  protocolName          String
  protocolType          String
  contractAddress       String
  network               BlockchainNetwork
  positionType          String
  poolName              String?
  totalValueUsd         Decimal           @db.Decimal(12, 2)
  principalUsd          Decimal?          @db.Decimal(12, 2)
  yieldEarned           Decimal?          @db.Decimal(12, 2)
  yieldEarnedUsd        Decimal?          @db.Decimal(12, 2)
  apr                   Decimal?          @db.Decimal(8, 4)
  apy                   Decimal?          @db.Decimal(8, 4)
  dailyYield            Decimal?          @db.Decimal(12, 2)
  totalReturn           Decimal?          @db.Decimal(12, 2)
  totalReturnPct        Decimal?          @db.Decimal(8, 4)
  assets                Json?
  isActive              Boolean           @default(true)
  canWithdraw           Boolean           @default(true)
  lockupEnd             DateTime?
  positionData          Json?
  lastYieldClaim        DateTime?
  zapperAppId           String?
  zapperGroupId         String?
  zapperPositionAddress String?
  appImageUrl           String?
  metaType              String?
  underlyingTokens      Json?
  displayProps          Json?
  syncSource            String            @default("zapper")
  externalPositionId    String?
  lastSyncAt            DateTime?         @default(now())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime
  crypto_wallets        crypto_wallets    @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, contractAddress, network, syncSource])
  @@index([lastSyncAt])
  @@index([metaType])
  @@index([positionType])
  @@index([protocolName])
  @@index([syncSource])
  @@index([walletId])
  @@index([zapperAppId])
}

model external_api_analytics {
  id                 String    @id
  requestId          String?
  userId             String?
  correlationId      String?
  provider           String
  service            String?
  endpoint           String
  method             String
  fullUrl            String?
  requestHeaders     Json?
  requestBody        Json?
  queryParams        Json?
  statusCode         Int?
  responseTime       Int
  responseSize       Int?
  responseHeaders    Json?
  rateLimitRemaining Int?
  rateLimitReset     DateTime?
  quotaUsed          Int?
  quotaRemaining     Int?
  success            Boolean   @default(true)
  errorMessage       String?
  errorCode          String?
  retryAttempt       Int       @default(0)
  cost               Decimal?  @db.Decimal(10, 6)
  currency           String?   @default("USD")
  cacheHit           Boolean   @default(false)
  cacheKey           String?
  cacheTtl           Int?
  purpose            String?
  userPlan           PlanType?
  metadata           Json?
  timestamp          DateTime  @default(now())
  createdAt          DateTime  @default(now())
  users              users?    @relation(fields: [userId], references: [id])

  @@index([correlationId])
  @@index([endpoint])
  @@index([provider])
  @@index([responseTime])
  @@index([success])
  @@index([timestamp])
  @@index([userId])
  @@index([userPlan])
}

model financial_accounts {
  id              String          @id
  userId          String
  name            String
  type            AccountType
  institutionName String?
  accountNumber   String?
  routingNumber   String?
  balance         Decimal         @default(0) @db.Decimal(12, 2)
  currency        String          @default("USD")
  isActive        Boolean         @default(true)
  plaidAccountId  String?
  plaidItemId     String?
  groupId         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  budgets         budgets[]
  account_groups  account_groups? @relation(fields: [groupId], references: [id])
  users           users           @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals           goals[]
  transactions    transactions[]
}

model goals {
  id                 String              @id
  userId             String
  accountId          String?
  name               String
  description        String?
  targetAmount       Decimal             @db.Decimal(12, 2)
  currentAmount      Decimal             @default(0) @db.Decimal(12, 2)
  targetDate         DateTime
  isAchieved         Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  financial_accounts financial_accounts? @relation(fields: [accountId], references: [id])
  users              users               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model payments {
  id                    String        @id
  subscriptionId        String
  amount                Decimal       @db.Decimal(8, 2)
  currency              String        @default("USD")
  status                PaymentStatus @default(PENDING)
  paymentMethodId       String?
  invoiceId             String?
  stripePaymentIntentId String?
  stripeChargeId        String?
  paymentMethod         String?
  periodStart           DateTime?
  periodEnd             DateTime?
  paymentDate           DateTime      @default(now())
  processedAt           DateTime?
  failureReason         String?
  lastPaymentDate       DateTime?
  metadata              Json?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime
  subscriptions         subscriptions @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model plans {
  id               String          @id
  type             PlanType        @unique
  name             String
  description      String
  monthlyPrice     Decimal         @db.Decimal(8, 2)
  yearlyPrice      Decimal         @db.Decimal(8, 2)
  isActive         Boolean         @default(true)
  maxAccounts      Int             @default(1)
  maxWallets       Int             @default(3)
  maxTransactions  Int             @default(100)
  maxCategories    Int             @default(10)
  maxBudgets       Int             @default(3)
  maxGoals         Int             @default(2)
  aiInsights       Boolean         @default(false)
  advancedReports  Boolean         @default(false)
  prioritySupport  Boolean         @default(false)
  apiAccess        Boolean         @default(false)
  exportData       Boolean         @default(false)
  customCategories Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  subscriptions    subscriptions[]
}

model session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model subscriptions {
  id                   String             @id
  userId               String             @unique
  planType             PlanType
  status               SubscriptionStatus @default(ACTIVE)
  billingPeriod        BillingPeriod      @default(MONTHLY)
  amount               Decimal            @db.Decimal(8, 2)
  currency             String             @default("USD")
  startDate            DateTime           @default(now())
  endDate              DateTime?
  currentPeriodStart   DateTime           @default(now())
  currentPeriodEnd     DateTime
  cancelAt             DateTime?
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  lastPaymentDate      DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripePriceId        String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  payments             payments[]
  plans                plans              @relation(fields: [planType], references: [type])
  users                users              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model transactions {
  id                 String             @id
  userId             String
  accountId          String
  categoryId         String?
  amount             Decimal            @db.Decimal(12, 2)
  description        String
  merchantName       String?
  date               DateTime
  pending            Boolean            @default(false)
  plaidTransactionId String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  financial_accounts financial_accounts @relation(fields: [accountId], references: [id], onDelete: Cascade)
  categories         categories?        @relation(fields: [categoryId], references: [id])
  users              users              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model twoFactor {
  id          String   @id
  userId      String   @unique
  secret      String
  backupCodes String[]
  enabled     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model usage_tracking {
  id        String   @id
  userId    String
  feature   String
  action    String
  timestamp DateTime @default(now())
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                         String                       @id
  email                      String                       @unique
  emailVerified              Boolean                      @default(false)
  emailVerifiedAt            DateTime?
  firstName                  String
  lastName                   String
  phone                      String?
  dateOfBirth                DateTime?
  role                       UserRole                     @default(USER)
  status                     UserStatus                   @default(PENDING_VERIFICATION)
  profilePicture             String?
  monthlyIncome              Decimal?                     @db.Decimal(12, 2)
  currency                   String                       @default("USD")
  timezone                   String                       @default("UTC")
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  lastLoginAt                DateTime?
  currentPlan                PlanType                     @default(FREE)
  subscriptionId             String?                      @unique
  image                      String?
  name                       String?
  account                    account[]
  account_groups             account_groups[]
  api_analytics              api_analytics[]
  audit_logs                 audit_logs[]
  budgets                    budgets[]
  categories                 categories[]
  crypto_portfolio_snapshots crypto_portfolio_snapshots[]
  crypto_wallets             crypto_wallets[]
  external_api_analytics     external_api_analytics[]
  financial_accounts         financial_accounts[]
  goals                      goals[]
  session                    session[]
  subscriptions              subscriptions?
  transactions               transactions[]
  usage_tracking             usage_tracking[]
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  MORTGAGE
  CRYPTO
}

enum AggregationGranularity {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum AggregationScope {
  GLOBAL
  USER
  ENDPOINT
  PROVIDER
  FEATURE
}

enum AssetType {
  TOKEN
  COIN
  LP_TOKEN
  STAKED_TOKEN
  YIELD_TOKEN
  GOVERNANCE_TOKEN
}

enum BillingPeriod {
  MONTHLY
  YEARLY
}

enum BlockchainNetwork {
  ETHEREUM
  POLYGON
  BSC
  ARBITRUM
  OPTIMISM
  AVALANCHE
  SOLANA
  BITCOIN
  BASE
  FANTOM
  CRONOS
  GNOSIS
  AURORA
  CELO
  MOONBEAM
  KAVA
}

enum NFTStandard {
  ERC721
  ERC1155
  SOLANA_NFT
  BTC_ORDINALS
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum PlanType {
  FREE
  PRO
  ULTIMATE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  TRIAL
  EXPIRED
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  DROPPED
}

enum TransactionType {
  SEND
  RECEIVE
  SWAP
  STAKE
  UNSTAKE
  LIQUIDITY_ADD
  LIQUIDITY_REMOVE
  BRIDGE
  APPROVE
  CLAIM
  MINT
  BURN
  CONTRACT_INTERACTION
  NFT_TRANSFER
  NFT_MINT
  NFT_BURN
}

enum UserRole {
  USER
  ADMIN
  PREMIUM
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum WalletType {
  HOT_WALLET
  COLD_WALLET
  EXCHANGE
  MULTI_SIG
  SMART_CONTRACT
}
